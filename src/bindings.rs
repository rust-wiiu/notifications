/* automatically generated by rust-bindgen 0.71.1 */

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]

pub const NOTIFICATION_MODULE_API_VERSION_ERROR: u32 = 4294967295;
pub mod NotificationModuleStatus {
    pub type Type = ::core::ffi::c_int;
    pub const NOTIFICATION_MODULE_RESULT_SUCCESS: Type = 0;
    pub const NOTIFICATION_MODULE_RESULT_MODULE_NOT_FOUND: Type = -1;
    pub const NOTIFICATION_MODULE_RESULT_MODULE_MISSING_EXPORT: Type = -2;
    pub const NOTIFICATION_MODULE_RESULT_UNSUPPORTED_VERSION: Type = -3;
    pub const NOTIFICATION_MODULE_RESULT_INVALID_ARGUMENT: Type = -4;
    pub const NOTIFICATION_MODULE_RESULT_LIB_UNINITIALIZED: Type = -5;
    pub const NOTIFICATION_MODULE_RESULT_UNSUPPORTED_COMMAND: Type = -6;
    pub const NOTIFICATION_MODULE_RESULT_OVERLAY_NOT_READY: Type = -16;
    pub const NOTIFICATION_MODULE_RESULT_UNSUPPORTED_TYPE: Type = -17;
    pub const NOTIFICATION_MODULE_RESULT_ALLOCATION_FAILED: Type = -18;
    pub const NOTIFICATION_MODULE_RESULT_INVALID_HANDLE: Type = -19;
    pub const NOTIFICATION_MODULE_RESULT_UNKNOWN_ERROR: Type = -4096;
}
pub type NotificationModuleAPIVersion = u32;
pub type NotificationModuleHandle = u32;
pub type NotificationModuleNotificationFinishedCallback = ::core::option::Option<
    unsafe extern "C" fn(arg1: NotificationModuleHandle, arg2: *mut ::core::ffi::c_void),
>;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _NMColor {
    pub r: u8,
    pub g: u8,
    pub b: u8,
    pub a: u8,
}
pub type NMColor = _NMColor;
pub mod NotificationModuleNotificationType {
    pub type Type = ::core::ffi::c_uint;
    pub const NOTIFICATION_MODULE_NOTIFICATION_TYPE_INFO: Type = 0;
    pub const NOTIFICATION_MODULE_NOTIFICATION_TYPE_ERROR: Type = 1;
    pub const NOTIFICATION_MODULE_NOTIFICATION_TYPE_DYNAMIC: Type = 2;
}
pub mod NotificationModuleStatusFinish {
    pub type Type = ::core::ffi::c_uint;
    pub const NOTIFICATION_MODULE_STATUS_FINISH: Type = 0;
    pub const NOTIFICATION_MODULE_STATUS_FINISH_WITH_SHAKE: Type = 1;
}
pub mod NotificationModuleNotificationOption {
    pub type Type = ::core::ffi::c_uint;
    pub const NOTIFICATION_MODULE_DEFAULT_OPTION_BACKGROUND_COLOR: Type = 0;
    pub const NOTIFICATION_MODULE_DEFAULT_OPTION_TEXT_COLOR: Type = 1;
    pub const NOTIFICATION_MODULE_DEFAULT_OPTION_DURATION_BEFORE_FADE_OUT: Type = 2;
    pub const NOTIFICATION_MODULE_DEFAULT_OPTION_FINISH_FUNCTION: Type = 3;
    pub const NOTIFICATION_MODULE_DEFAULT_OPTION_FINISH_FUNCTION_CONTEXT: Type = 4;
    pub const NOTIFICATION_MODULE_DEFAULT_OPTION_KEEP_UNTIL_SHOWN: Type = 5;
}
unsafe extern "C" {
    pub fn NotificationModule_GetStatusStr(
        status: NotificationModuleStatus::Type,
    ) -> *const ::core::ffi::c_char;
    pub fn NotificationModule_InitLibrary() -> NotificationModuleStatus::Type;
    pub fn NotificationModule_DeInitLibrary() -> NotificationModuleStatus::Type;
    pub fn NotificationModule_GetVersion(
        outVersion: *mut NotificationModuleAPIVersion,
    ) -> NotificationModuleStatus::Type;
    pub fn NotificationModule_IsOverlayReady(
        outIsReady: *mut bool,
    ) -> NotificationModuleStatus::Type;
    pub fn NotificationModule_SetDefaultValue(
        type_: NotificationModuleNotificationType::Type,
        optionType: NotificationModuleNotificationOption::Type,
        ...
    ) -> NotificationModuleStatus::Type;
    pub fn NotificationModule_AddInfoNotificationEx(
        text: *const ::core::ffi::c_char,
        durationBeforeFadeOutInSeconds: f32,
        textColor: NMColor,
        backgroundColor: NMColor,
        callback: NotificationModuleNotificationFinishedCallback,
        callbackContext: *mut ::core::ffi::c_void,
        keepUntilShown: bool,
    ) -> NotificationModuleStatus::Type;
    pub fn NotificationModule_AddInfoNotification(
        text: *const ::core::ffi::c_char,
    ) -> NotificationModuleStatus::Type;
    pub fn NotificationModule_AddInfoNotificationWithCallback(
        text: *const ::core::ffi::c_char,
        callback: NotificationModuleNotificationFinishedCallback,
        callbackContext: *mut ::core::ffi::c_void,
    ) -> NotificationModuleStatus::Type;
    pub fn NotificationModule_AddErrorNotificationEx(
        text: *const ::core::ffi::c_char,
        durationBeforeFadeOutInSeconds: f32,
        shakeDurationInSeconds: f32,
        textColor: NMColor,
        backgroundColor: NMColor,
        callback: NotificationModuleNotificationFinishedCallback,
        callbackContext: *mut ::core::ffi::c_void,
        keepUntilShown: bool,
    ) -> NotificationModuleStatus::Type;
    pub fn NotificationModule_AddErrorNotification(
        text: *const ::core::ffi::c_char,
    ) -> NotificationModuleStatus::Type;
    pub fn NotificationModule_AddErrorNotificationWithCallback(
        text: *const ::core::ffi::c_char,
        callback: NotificationModuleNotificationFinishedCallback,
        callbackContext: *mut ::core::ffi::c_void,
    ) -> NotificationModuleStatus::Type;
    pub fn NotificationModule_AddDynamicNotificationEx(
        text: *const ::core::ffi::c_char,
        outHandle: *mut NotificationModuleHandle,
        textColor: NMColor,
        backgroundColor: NMColor,
        callback: NotificationModuleNotificationFinishedCallback,
        callbackContext: *mut ::core::ffi::c_void,
        keepUntilShown: bool,
    ) -> NotificationModuleStatus::Type;
    pub fn NotificationModule_AddDynamicNotification(
        text: *const ::core::ffi::c_char,
        outHandle: *mut NotificationModuleHandle,
    ) -> NotificationModuleStatus::Type;
    pub fn NotificationModule_AddDynamicNotificationWithCallback(
        text: *const ::core::ffi::c_char,
        outHandle: *mut NotificationModuleHandle,
        callback: NotificationModuleNotificationFinishedCallback,
        callbackContext: *mut ::core::ffi::c_void,
    ) -> NotificationModuleStatus::Type;
    pub fn NotificationModule_UpdateDynamicNotificationText(
        handle: NotificationModuleHandle,
        text: *const ::core::ffi::c_char,
    ) -> NotificationModuleStatus::Type;
    pub fn NotificationModule_UpdateDynamicNotificationBackgroundColor(
        handle: NotificationModuleHandle,
        backgroundColor: NMColor,
    ) -> NotificationModuleStatus::Type;
    pub fn NotificationModule_UpdateDynamicNotificationTextColor(
        handle: NotificationModuleHandle,
        textColor: NMColor,
    ) -> NotificationModuleStatus::Type;
    pub fn NotificationModule_FinishDynamicNotification(
        handle: NotificationModuleHandle,
        durationBeforeFadeOutInSeconds: f32,
    ) -> NotificationModuleStatus::Type;
    pub fn NotificationModule_FinishDynamicNotificationWithShake(
        handle: NotificationModuleHandle,
        durationBeforeFadeOutInSeconds: f32,
        shakeDuration: f32,
    ) -> NotificationModuleStatus::Type;
}
